{"version":3,"sources":["components/header.jsx","components/card.jsx","components/top-card-list.jsx","components/card-small.jsx","components/overview.jsx","components/switch.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Card","username","followers","todayFollowers","icon","name","cardClass","src","alt","cardListData","id","TopCardList","map","cardData","key","CardSmall","growth","pageViews","cardSmallList","Overview","Switch","setDarkMode","checked","setChecked","ref","useRef","onChange","event","current","type","htmlFor","App","useState","darkMode","mainClass","changeMedia","mq","matches","useEffect","window","matchMedia","addListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c94a5b4c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../assets/css/header.css\";\n\nfunction Header({ children }) {\n  return (\n    <header className=\"header\">\n      <div className=\"wrapper\">\n        <div className=\"header-grid\">\n          <div>\n            <h1>Social Media Dashboard</h1>\n            <p className=\"header-total\">Total Followers: 23, 004</p>\n          </div>\n          {children}\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"../assets/css/card.css\";\n\nfunction Card({ username, followers, todayFollowers, icon, name }) {\n  const cardClass = `card ${name}`;\n\n  return (\n    <article className={cardClass}>\n      <p className=\"card-title\">\n        <img src={icon} alt=\"Hola\" />\n        {username}\n      </p>\n      <p className=\"card-followers\">\n        <span className=\"card-followers-number\">{followers}</span>\n        <span className=\"card-followers-title\">Followers</span>\n      </p>\n      <p className=\"card-today\">\n        <img src=\"images/icon-up.svg\" alt=\"\" />\n        {todayFollowers} Today\n      </p>\n    </article>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./card\";\nimport \"../assets/css/top-card-list.css\";\n\nconst cardListData = [\n  {\n    id: 1,\n    username: \"@DazaiLuxF\",\n    followers: \"1596\",\n    todayFollowers: 12,\n    icon: \"images/icon-facebook.svg\",\n    name: \"facebook\",\n  },\n  {\n    id: 2,\n    username: \"@DazaiLuxT\",\n    followers: \"1596\",\n    todayFollowers: 12,\n    icon: \"images/icon-twitter.svg\",\n    name: \"twitter\",\n  },\n  {\n    id: 3,\n    username: \"@DazaiLuxI\",\n    followers: \"1596\",\n    todayFollowers: 12,\n    icon: \"images/icon-instagram.svg\",\n    name: \"instagram\",\n  },\n  {\n    id: 4,\n    username: \"@DazaiLuxY\",\n    followers: \"1596\",\n    todayFollowers: 12,\n    icon: \"images/icon-youtube.svg\",\n    name: \"youtube\",\n  },\n];\n\nfunction TopCardList() {\n  return (\n    <section className=\"top-cards\">\n      <div className=\"wrapper\">\n        <div className=\"grid\">\n          {cardListData.map((cardData) => (\n            <Card key={cardData.id} {...cardData} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default TopCardList;\n","import React from \"react\";\nimport \"../assets/css/card-small.css\";\n\nfunction CardSmall({ growth, pageViews, icon }) {\n  return (\n    <div className=\"card-small\">\n      <p className=\"card-small-views\">Page Views</p>\n      <p className=\"card-small-icon\">\n        <img src={icon} alt=\"\" />\n      </p>\n      <p className=\"card-small-number\">{pageViews}</p>\n      <p className=\"card-small-percentage\">\n        <span>\n          <img src=\"images/icon-up.svg\" alt=\"icon\" />\n          {growth}%\n        </span>\n      </p>\n    </div>\n  );\n}\n\nexport default CardSmall;\n","import React from \"react\";\nimport CardSmall from \"./card-small\";\nimport \"../assets/css/overview.css\";\n\nconst cardSmallList = [\n  {\n    icon: \"images/icon-facebook.svg\",\n    pageViews: \"87\",\n    growth: 3,\n    key: 1,\n  },\n  {\n    icon: \"images/icon-twitter.svg\",\n    pageViews: \"88\",\n    growth: 3,\n    key: 2,\n  },\n  {\n    icon: \"images/icon-instagram.svg\",\n    pageViews: \"100\",\n    growth: 3,\n    key: 3,\n  },\n  {\n    icon: \"images/icon-youtube.svg\",\n    pageViews: \"50\",\n    growth: 3,\n    key: 4,\n  },\n];\n\nfunction Overview() {\n  return (\n    <section className=\"overview\">\n      <div className=\"wrapper\">\n        <h2>Overview - Today</h2>\n        <div className=\"grid\">\n          {cardSmallList.map(({ icon, pageViews, growth, key }) => (\n            <CardSmall\n              icon={icon}\n              key={key}\n              pageViews={pageViews}\n              growth={growth}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Overview;\n","import React, { useRef } from \"react\";\nimport \"../assets/css/switch.css\";\n\nfunction Switch({ setDarkMode, checked, setChecked }) {\n  const ref = useRef(null);\n  function handleChange(event) {\n    setChecked(ref.current.checked);\n    setDarkMode(ref.current.checked);\n  }\n\n  return (\n    <div className=\"dark-mode\">\n      <p className=\"dark-mode-title\">Dark Mode</p>\n      <input\n        ref={ref}\n        onChange={handleChange}\n        type=\"checkbox\"\n        checked={checked}\n        className=\"checkbox\"\n        id=\"checkbox\"\n      />\n      <label className=\"switch\" htmlFor=\"checkbox\"></label>\n    </div>\n  );\n}\n\nexport default Switch;\n","import React, { useState, useEffect } from \"react\";\nimport \"./globals.css\";\n// Componentes\nimport Header from \"./components/header\";\nimport TopCardList from \"./components/top-card-list\";\nimport Overview from \"./components/overview\";\nimport Switch from \"./components/switch\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [checked, setChecked] = useState(false);\n\n  const mainClass = darkMode ? \"is-dark-mode\" : \"is-light-mode\";\n\n  function changeMedia(mq) {\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    mq.addListener(changeMedia);\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n  }, []); //[] sirve para solo ejecutarlo despues de montar el componente\n  return (\n    <main className={mainClass}>\n      <Header>\n        <Switch\n          setDarkMode={setDarkMode}\n          checked={checked}\n          setChecked={setChecked}\n        />\n      </Header>\n      <TopCardList />\n      <Overview />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}